# -*- coding: utf-8 -*-
"""seção8_regressãoLogistica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LlkuqQlMrRojDw5NnxptsMpHAMo9DAVR
"""

import pandas as pd
import numpy as np

import pickle
with open('risco_credito.pkl', 'rb') as f:
  X_risco_credito, y_risco_credito = pickle.load(f)

from sklearn.linear_model import LogisticRegression

X_risco_credito

y_risco_credito # 2, 7, 11 apagar

X_risco_credito = np.delete(X_risco_credito, [2, 7, 11], axis = 0)
y_risco_credito = np.delete(y_risco_credito, [2, 7, 11], axis = 0)

X_risco_credito

y_risco_credito

"""**Regressão Risco de crédito**"""

logistic_risco_credito = LogisticRegression(random_state = 1)
logistic_risco_credito.fit(X_risco_credito,y_risco_credito)

logistic_risco_credito.intercept_

logistic_risco_credito.coef_

previsoes1 = logistic_risco_credito.predict([[0,0,1,2], [2,0,0,0]])
previsoes1

"""**Regressão Base de dados do crédito**"""

import pickle
with open('credit.pkl', 'rb') as f:
  X_credit_treinamento, y_credit_treinamento, X_credit_test, y_credit_test = pickle.load(f)

X_credit_treinamento.shape, y_credit_treinamento.shape

X_credit_test.shape, y_credit_test.shape

logistic_credit = LogisticRegression(random_state = 1)
logistic_credit.fit(X_credit_treinamento, y_credit_treinamento)

logistic_credit.intercept_

logistic_credit.coef_

previsoes = logistic_credit.predict(X_credit_test)
previsoes

y_credit_test

from sklearn.metrics import accuracy_score, classification_report
accuracy_score(y_credit_test, previsoes)

from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(logistic_credit)
cm.fit(X_credit_treinamento, y_credit_treinamento)
cm.score(X_credit_test, y_credit_test)

print(classification_report(y_credit_test, previsoes))

"""**Base Census**"""

import pickle
with open('census.pkl', 'rb') as f:
  X_census_treinamento, y_census_treinamento, X_census_test, y_census_test = pickle.load(f)

X_census_treinamento.shape, y_census_treinamento.shape

X_census_test.shape, y_census_test.shape

logistic_census = LogisticRegression(random_state=1)
logistic_census.fit(X_census_treinamento, y_census_treinamento)

previsoes =  logistic_census.predict(X_census_test)
previsoes

y_census_test

from sklearn.metrics import accuracy_score, classification_report
accuracy_score(y_census_test, previsoes)

from yellowbrick.classifier import ConfusionMatrix
cm = ConfusionMatrix(logistic_credit)
cm.fit(X_census_treinamento, y_census_treinamento)
cm.score(X_census_test, y_census_test)

print(classification_report(y_census_test, previsoes))
